name: Build
on:
  push:
    paths:
      - 'setup.py'
      - 'setup.cfg'
      - 'PKG-INFO'
      - 'src/*.*'
      - 'src/**.py'
      - 'src/**.nim'
      - 'src/**.nims'
      - 'src/**.cfg'
      - '.github/workflows/*.yml'
      - '.github/workflows/*.yaml'

jobs:
  # https://gist.github.com/ybiquitous/c80f15c18319c63cae8447a3be341267#file-skip-ci-on-actions-yml
  check_skip:
    runs-on: ubuntu-latest
    if: |
      !contains(format('{0} {1} {2}', github.event.head_commit.message, github.event.pull_request.title, github.event.pull_request.body), '[skip ci]')
    steps:
      - run: |
          cat <<'MESSAGE'
          github.event_name: ${{ toJson(github.event_name) }}
          github.event:
          ${{ toJson(github.event) }}
          MESSAGE

  build:
    needs: check_skip
    strategy:
      fail-fast: true
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    name: ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v1


    - name: Get Git Commit Short Hash
      id: vars
      shell: bash
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"


    - name: Set Environment Variables
      uses: allenevans/set-env@v1.0.0
      with:
        MAIN_MODULE:           "src/faster_than_walk.nim"
        PACKAGE_NAME:          "faster_than_walk"
        PACKAGE_VERSION:       ${{ steps.vars.outputs.sha_short }}
        TWINE_USERNAME:        ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD:        ${{ secrets.PYPI_PASSWORD }}
        TWINE_NON_INTERACTIVE: 1


    - name: Clone Nim                   # Clone Nim
      run: |
        git clone -q --depth 1 https://github.com/nim-lang/Nim.git
        echo "::add-path::$PWD/Nim/bin"


    - name: Build Nim (Unix)            # Build Nim for Linux and Mac
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
        cd Nim
        ./build_all.sh


    - name: Build Nim (Windows)         # Build Nim for Windows
      if: runner.os == 'Windows'
      run: |
        cd Nim
        ./build_all.bat


    - name: Nimble Refresh              # Refresh Nimble packages list
      run: nimble -y refresh


    - name: Nimble Install dependencies # Install Nimpy
      run: nimble -y install nimpy


    - name: Prepare Folders             # Prepare folders for the Python package
      shell: bash
      run: mkdir -p dist/lin dist/win dist/mac dist/$PACKAGE_NAME.egg-info docs


    - name: Prepare Files               # Prepare files for the Python package
      shell: bash
      run: |
        touch dist/LICENSE dist/$PACKAGE_NAME.egg-info/zip-safe dist/$PACKAGE_NAME.egg-info/top_level.txt dist/$PACKAGE_NAME.egg-info/requires.txt dist/$PACKAGE_NAME.egg-info/dependency_links.txt
        cp -f $PWD/setup.py           dist/setup.py
        cp -f $PWD/Nim/lib/nimbase.h  dist/lin/nimbase.h
        cp -f $PWD/Nim/lib/nimbase.h  dist/win/nimbase.h
        cp -f $PWD/Nim/lib/nimbase.h  dist/mac/nimbase.h


    - name: Nim Check                   # Check code style and semantic.
      shell: bash
      run: nim check --styleCheck:hint ${{ env.MAIN_MODULE }}


    - name: Documentation               # Generate documentation.
      run: |
        nim doc --out:docs/index.html ${{ env.MAIN_MODULE }}
        nim rst2tex --out:docs/${{ env.PACKAGE_NAME }}.tex ${{ env.MAIN_MODULE }}


    - name: Compile Debug & import (Unix)  # Compile and import to check if its working
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
        nim c --app:lib --out:$PACKAGE_NAME.so $MAIN_MODULE
        python3 -c "import $PACKAGE_NAME"


    - name: Compile Debug & import (Windows) # Compile and import to check if its working
      if: runner.os == 'Windows'
      run: |
        nim c --app:lib --out:${{ env.PACKAGE_NAME }}.pyd ${{ env.MAIN_MODULE }}
        python.exe -c "import ${{ env.PACKAGE_NAME }}"


    - name: Compile (Linux) # Compile to C for Linux
      if: runner.os == 'Linux'
      run: |
        nim compileToC --compileOnly:on --noLinking:on --nimcache:dist/lin/             \
        -d:danger -d:release -d:nimBinaryStdFiles -d:noSignalHandler -d:lto             \
        --app:lib --opt:speed --cpu:amd64 --forceBuild --compileOnly --tlsEmulation:off \
        --stackTrace:off --exceptions:goto --gc:markAndSweep  --excessiveStackTrace:off \
        ${{ env.MAIN_MODULE }}


    - name: Compile (Mac) # Compile to C for Mac
      if: runner.os == 'macOS'
      run: |
        nim compileToC --compileOnly:on --noLinking:on --nimcache:dist/mac/             \
        -d:danger -d:release -d:nimBinaryStdFiles -d:noSignalHandler -d:lto             \
        --app:lib --opt:speed --cpu:amd64 --forceBuild --compileOnly --tlsEmulation:off \
        --stackTrace:off --exceptions:goto --gc:markAndSweep  --excessiveStackTrace:off \
        ${{ env.MAIN_MODULE }}


    - name: Compile (Windows) # Compile to C for Windows
      if: runner.os == 'Windows'
      run: nim compileToC --compileOnly:on --noLinking:on --nimcache:dist/win/ -d:danger -d:release -d:nimBinaryStdFiles -d:noSignalHandler -d:lto --app:lib --opt:speed --cpu:amd64 --forceBuild --compileOnly --tlsEmulation:on --stackTrace:off --exceptions:goto --gc:markAndSweep  --excessiveStackTrace:off ${{ env.MAIN_MODULE }}


    - name: Clean out
      shell: bash
      run: rm -f dist/lin/*.json dist/win/*.json dist/mac/*.json


    - name: SemVer                      # Use Git Hash as versioning.
      shell: bash
      run: |
        cp -f $PWD/setup.cfg dist/setup.cfg
        date +"%y.%m.%d" >>  dist/setup.cfg
        cp -f $PWD/PKG-INFO  dist/$PACKAGE_NAME.egg-info/PKG-INFO
        date +"%y.%m.%d" >>  dist/$PACKAGE_NAME.egg-info/PKG-INFO


    - name: Delay                       # Linux must finish last.
      if: runner.os == 'Linux'
      run: sleep 5m


    - name: Compress to ZIP  # Make Python package
      if: runner.os == 'Linux' || runner.os == 'macOS'
      shell: bash
      run: |
        cd dist
        rm -f *.zip
        zip -9 -T -v -r $PACKAGE_NAME-${{ env.PACKAGE_VERSION }}.zip *


    - uses: EndBug/add-and-commit@v4  # Commit everything to Git repo
      with:
        add: 'dist'
        force: true
        message: 'Fully Automated Luxury Python'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    - uses: EndBug/add-and-commit@v4  # Commit everything to Git repo
      if: runner.os == 'Linux'
      with:
        add: 'docs'
        force: true
        message: 'Fully Automated Luxury Documentation'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    - name: Upload to PYPI  # If everything worked, then upload to PYPI
      if: runner.os == 'Linux'
      run: |
        pip3 install --quiet --upgrade --disable-pip-version-check twine
        twine upload --verbose --disable-progress-bar --comment "Powered by https://Nim-lang.org" dist/*.zip


    - name: Cache Nim # Cache the Nim compiler build
      uses: actions/cache@v1
      with:
        path: $PWD/Nim/
        key: ${{ runner.os }}-nim
