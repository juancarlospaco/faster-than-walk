name: Build

on:
  push:
    paths:
      - 'setup.py'
      - 'setup.cfg'
      - 'PKG-INFO'
      - 'src/*.*'
      - 'src/**.py'
      - 'src/**.nim'
      - 'src/**.nims'
      - 'src/**.cfg'
      - '.github/workflows/*.yml'
      - '.github/workflows/*.yaml'
      - '.gitignore'

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    name: ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v1


    - name: Get Git Commit Short Hash
      id: vars
      shell: bash
      run: |
        echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        echo "::set-output name=semver_date::$(date +"%y.%m.%d")"


    - name: Set Environment Variables
      uses: allenevans/set-env@v1.0.0
      with:
        NIM_VERSION:           "1.4.0"
        PACKAGE_NAME:          "faster_than_walk"
        MAIN_MODULE:           "src/faster_than_walk.nim"
        TWINE_USERNAME:        ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD:        ${{ secrets.PYPI_PASSWORD }}
        PACKAGE_VERSION:       ${{ steps.vars.outputs.sha_short }}
        TWINE_NON_INTERACTIVE: 1
        NIM_COMMON_OPTIONS:    >-
          compileToC --compileOnly:on --colors:off --threads:off
          -d:release -d:danger -d:lto -d:strip -d:ssl --app:lib --sinkInference:on
          -d:nimBinaryStdFiles -d:noSignalHandler -d:nimDisableCertificateValidation
          --opt:speed --cpu:amd64 --forceBuild --gc:arc --panics:on
          --stackTrace:off --excessiveStackTrace:off --experimental:parallel


    - name: Update Python PIP
      run: pip3 install --quiet --upgrade --disable-pip-version-check pip twine


    - name: Clone Nim
      run: |
        git clone -q --depth 1 --branch v${{ env.NIM_VERSION }} https://github.com/nim-lang/Nim.git
        echo "::add-path::$PWD/Nim/bin"


    - name: Build Nim (Unix)
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
        cd Nim
        ./build_all.sh


    - name: Build Nim (Windows)
      if: runner.os == 'Windows'
      run: |
        cd Nim
        ./build_all.bat


    - name: Nimble Refresh
      run: nimble -y refresh


    - name: Nimble Install dependencies
      run: nimble -y install nimpy


    - name: Nim Check
      shell: bash
      run: nim check --styleCheck:hint ${{ env.MAIN_MODULE }}


    - name: Prepare Folders
      if: runner.os == 'Linux'
      run: mkdir -p dist/lin dist/win dist/mac dist/$PACKAGE_NAME.egg-info


    - name: Prepare Files
      if: runner.os == 'Linux'
      run: |
        touch dist/LICENSE dist/$PACKAGE_NAME.egg-info/zip-safe dist/$PACKAGE_NAME.egg-info/top_level.txt dist/$PACKAGE_NAME.egg-info/requires.txt dist/$PACKAGE_NAME.egg-info/dependency_links.txt
        cp --force $PWD/setup.py          dist/setup.py
        cp --force $PWD/Nim/lib/nimbase.h dist/lin/nimbase.h
        cp --force $PWD/Nim/lib/nimbase.h dist/win/nimbase.h
        cp --force $PWD/Nim/lib/nimbase.h dist/mac/nimbase.h


    - name: Delay                       # Linux must finish last.
      if: runner.os == 'Linux'
      run: sleep 8m


    - name: SemVer                      # Use Git Hash as versioning.
      if: runner.os == 'Linux'
      run: |
        cp --force $PWD/setup.cfg dist/setup.cfg
        date +"%y.%m.%d" >> dist/setup.cfg
        cp --force $PWD/PKG-INFO dist/$PACKAGE_NAME.egg-info/PKG-INFO
        date +"%y.%m.%d" >> dist/$PACKAGE_NAME.egg-info/PKG-INFO


    - name: Compile Debug & import (Unix)
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
        nim c --app:lib --out:${{ env.PACKAGE_NAME }}.so ${{ env.MAIN_MODULE }}
        python3 -c "import ${{ env.PACKAGE_NAME }}"


    - name: Compile Debug & import (Windows)
      if: runner.os == 'Windows'
      run: |
        nim c --app:lib --out:${{ env.PACKAGE_NAME }}.pyd ${{ env.MAIN_MODULE }}
        python.exe -c "import ${{ env.PACKAGE_NAME }}"


    - name: Clean out C (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: rm -f dist/lin/*.c


    - name: Clean out C (Mac)
      if: runner.os == 'macOS'
      shell: bash
      run: rm -f dist/mac/*.c


    - name: Clean out C (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: rm -f dist/win/*.c


    - name: Compile to C (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: nim ${{ env.NIM_COMMON_OPTIONS }} --nimcache:dist/lin --tlsEmulation:off ${{ env.MAIN_MODULE }}


    - name: Compile to C (Mac)
      if: runner.os == 'macOS'
      shell: bash
      run: nim ${{ env.NIM_COMMON_OPTIONS }} --nimcache:dist/mac --tlsEmulation:off ${{ env.MAIN_MODULE }}


    - name: Compile to C (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: nim ${{ env.NIM_COMMON_OPTIONS }} --nimcache:dist/win --tlsEmulation:on ${{ env.MAIN_MODULE }}


    - name: Clean out
      if: runner.os == 'Linux'
      run: rm --force --verbose dist/lin/*.json dist/win/*.json dist/mac/*.json dist/lin/*.c.o dist/win/*.c.o dist/mac/*.c.o


    - name: SemVer
      shell: bash
      run: |
        cp -f $PWD/setup.cfg dist/setup.cfg
        echo ${{ steps.vars.outputs.semver_date }} >>  dist/setup.cfg
        cp -f $PWD/PKG-INFO  dist/$PACKAGE_NAME.egg-info/PKG-INFO
        echo ${{ steps.vars.outputs.semver_date }} >>  dist/$PACKAGE_NAME.egg-info/PKG-INFO


    - name: Delay (Linux) # Linux should finish last.
      if: runner.os == 'Linux'
      run: sleep 9m


    - name: Compress to ZIP (Unix)  # Make Python package
      if: runner.os == 'Linux' || runner.os == 'macOS'
      shell: bash
      run: |
        cd dist
        rm -f *.zip
        zip -9 -T -v -r $PACKAGE_NAME-${{ steps.vars.outputs.sha_short }}.zip *


    - name: Commit Code
      uses: EndBug/add-and-commit@v5  # Commit everything to Git repo
      with:
        add: 'dist --force'
        force: true
        message: ${{ steps.vars.outputs.semver_date }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    - name: Cache Nim
      uses: actions/cache@v1
      with:
        path: $PWD/Nim/
        key: ${{ runner.os }}-nim
